"""Interactive test for autolbl package functionality."""

import sys
from pathlib import Path

def test_package_structure():
    """Test that the package structure is correct."""
    print("=" * 60)
    print("Testing AutoLbl Package Structure")
    print("=" * 60)
    
    try:
        import autolbl
        print(f"‚úÖ Package version: {autolbl.__version__}")
        print(f"‚úÖ Package location: {autolbl.__file__}")
        
        # Test submodules exist
        print("\nüì¶ Testing submodules...")
        assert hasattr(autolbl, 'models'), "Missing models module"
        print("  ‚úÖ autolbl.models")
        
        assert hasattr(autolbl, 'datasets'), "Missing datasets module"
        print("  ‚úÖ autolbl.datasets")
        
        assert hasattr(autolbl, 'evaluation'), "Missing evaluation module"
        print("  ‚úÖ autolbl.evaluation")
        
        assert hasattr(autolbl, 'ontology'), "Missing ontology module"
        print("  ‚úÖ autolbl.ontology")
        
        assert hasattr(autolbl, 'visualization'), "Missing visualization module"
        print("  ‚úÖ autolbl.visualization")
        
        return True
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_model_imports():
    """Test that model classes can be imported."""
    print("\n" + "=" * 60)
    print("Testing Model Imports")
    print("=" * 60)
    
    models_to_test = [
        ("Florence2", "autolbl.models.florence"),
        ("GroundingDINO", "autolbl.models.grounding_dino"),
        ("Qwen25VL", "autolbl.models.qwen"),
        ("MetaCLIP", "autolbl.models.metaclip"),
        ("ComposedDetectionModel2", "autolbl.models.composed"),
    ]
    
    success = True
    for class_name, module_path in models_to_test:
        try:
            module = __import__(module_path, fromlist=[class_name])
            cls = getattr(module, class_name)
            print(f"  ‚úÖ {class_name} from {module_path}")
        except ImportError as e:
            print(f"  ‚ö†Ô∏è  {class_name} - Import error (may need optional dependencies): {e}")
        except Exception as e:
            print(f"  ‚ùå {class_name} - Error: {e}")
            success = False
    
    return success

def test_dataset_utilities():
    """Test dataset utility functions."""
    print("\n" + "=" * 60)
    print("Testing Dataset Utilities")
    print("=" * 60)
    
    try:
        from autolbl.datasets.dataset_prep import get_base_dir
        
        # Test base directory detection
        base_dir = get_base_dir(__file__)
        print(f"  ‚úÖ Base directory detected: {base_dir}")
        
        # Check if it found the project root correctly
        pyproject = base_dir / "pyproject.toml"
        if pyproject.exists():
            print(f"  ‚úÖ Found pyproject.toml at project root")
        else:
            print(f"  ‚ö†Ô∏è  pyproject.toml not found - base_dir may be incorrect")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_evaluation_metrics():
    """Test evaluation metrics."""
    print("\n" + "=" * 60)
    print("Testing Evaluation Metrics")
    print("=" * 60)
    
    try:
        from autolbl.evaluation.metrics import evaluate_detections
        print("  ‚úÖ evaluate_detections imported")
        
        # You could add a simple test with dummy data here
        return True
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_cli_availability():
    """Test that CLI commands are available."""
    print("\n" + "=" * 60)
    print("Testing CLI Availability")
    print("=" * 60)
    
    try:
        from autolbl.cli.prepare import main as prepare_main
        from autolbl.cli.infer import main as infer_main
        
        print("  ‚úÖ autolbl-prepare (prepare_main)")
        print("  ‚úÖ autolbl-infer (infer_main)")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run all tests."""
    print("\nüöÄ AutoLbl Package Testing Suite\n")
    
    results = {
        "Package Structure": test_package_structure(),
        "Model Imports": test_model_imports(),
        "Dataset Utilities": test_dataset_utilities(),
        "Evaluation Metrics": test_evaluation_metrics(),
        "CLI Availability": test_cli_availability(),
    }
    
    print("\n" + "=" * 60)
    print("Test Summary")
    print("=" * 60)
    
    for test_name, passed in results.items():
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        print(f"{status}: {test_name}")
    
    all_passed = all(results.values())
    
    if all_passed:
        print("\nüéâ All tests passed! Package restructuring successful!")
        return 0
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Review errors above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
